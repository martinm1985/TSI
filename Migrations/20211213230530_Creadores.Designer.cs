// <auto-generated />
using System;
using Crud.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Crud.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211213230530_Creadores")]
    partial class Creadores
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Crud.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Fotografia"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Videos"
                        });
                });

            modelBuilder.Entity("Crud.Models.Contenido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Archivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<string>("Calidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("CreadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DerechoAutor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TipoSuscripcionId")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("CreadorId");

                    b.HasIndex("TipoSuscripcionId");

                    b.ToTable("Contenido");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Contenido");
                });

            modelBuilder.Entity("Crud.Models.Conversacion", b =>
                {
                    b.Property<int>("ConversacionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConversacionId");

                    b.HasIndex("CreadorId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Conversacion");
                });

            modelBuilder.Entity("Crud.Models.Creador", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Categoria1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Categoria2Id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntidadFinanciera")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePortada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MsjBienvenidaGral")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroDeCuenta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VideoYoutube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Categoria1Id");

                    b.HasIndex("Categoria2Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Creadores");
                });

            modelBuilder.Entity("Crud.Models.DevolucionPayPal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DevolucionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoDevolucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaDevolucion")
                        .HasColumnType("datetime2");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PagoId");

                    b.ToTable("DevolucionesPayPal");
                });

            modelBuilder.Entity("Crud.Models.EntidadFinanciera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Borrado")
                        .HasColumnType("bit");

                    b.Property<bool>("Cuenta")
                        .HasColumnType("bit");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TarjetaCredito")
                        .HasColumnType("bit");

                    b.Property<bool>("TarjetaDebito")
                        .HasColumnType("bit");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EntidadesFinancieras");
                });

            modelBuilder.Entity("Crud.Models.Finanza", b =>
                {
                    b.Property<int>("FinanzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantidadDevoluciones")
                        .HasColumnType("int");

                    b.Property<string>("CreadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaMes")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Indicador")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FinanzaId");

                    b.HasIndex("CreadorId");

                    b.ToTable("Finanza");
                });

            modelBuilder.Entity("Crud.Models.FinanzaPlataforma", b =>
                {
                    b.Property<int>("FinanzaPlataformaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaMes")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Indicador")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FinanzaPlataformaId");

                    b.ToTable("FinanzaPlataforma");
                });

            modelBuilder.Entity("Crud.Models.HistoricoSuscripcion", b =>
                {
                    b.Property<int>("HistoricoSuscripcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<int>("TipoSuscripcionId")
                        .HasColumnType("int");

                    b.HasKey("HistoricoSuscripcionId");

                    b.HasIndex("TipoSuscripcionId");

                    b.ToTable("HistoricoSuscripcion");
                });

            modelBuilder.Entity("Crud.Models.MediosDePagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Borrado")
                        .HasColumnType("bit");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEntidadFinanciera")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdEntidadFinanciera");

                    b.HasIndex("UserId");

                    b.ToTable("MediosDePagos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MediosDePagos");
                });

            modelBuilder.Entity("Crud.Models.Mensaje", b =>
                {
                    b.Property<int>("MensajeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConversacionId")
                        .HasColumnType("int");

                    b.Property<string>("CuerpoMensaje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Leido")
                        .HasColumnType("bit");

                    b.Property<string>("UserSender")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MensajeId");

                    b.HasIndex("ConversacionId");

                    b.ToTable("Mensaje");
                });

            modelBuilder.Entity("Crud.Models.Pago", b =>
                {
                    b.Property<int>("IdPago")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Aprobado")
                        .HasColumnType("bit");

                    b.Property<bool>("Devolucion")
                        .HasColumnType("bit");

                    b.Property<bool>("Devuelto")
                        .HasColumnType("bit");

                    b.Property<bool>("EsPayPal")
                        .HasColumnType("bit");

                    b.Property<bool>("EsSuscripcion")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdMedioDePago")
                        .HasColumnType("int");

                    b.Property<int>("IdPagoDevolucion")
                        .HasColumnType("int");

                    b.Property<int?>("MedioId")
                        .HasColumnType("int");

                    b.Property<string>("Moneda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ObservacionDevolucion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipoSuscripcionId")
                        .HasColumnType("int");

                    b.HasKey("IdPago");

                    b.HasIndex("MedioId");

                    b.HasIndex("TipoSuscripcionId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Crud.Models.PagoPayPal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EstadoPago")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdCaptura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PagoId");

                    b.ToTable("PagosPayPal");
                });

            modelBuilder.Entity("Crud.Models.Parametros", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre");

                    b.ToTable("Parametros");

                    b.HasData(
                        new
                        {
                            Nombre = "SUSCDEFECTO1",
                            Valor = "1"
                        },
                        new
                        {
                            Nombre = "SUSCDEFECTO2",
                            Valor = "2"
                        },
                        new
                        {
                            Nombre = "SUSCDEFECTO3",
                            Valor = "3"
                        },
                        new
                        {
                            Nombre = "GananciaCreador",
                            Valor = "0.9"
                        });
                });

            modelBuilder.Entity("Crud.Models.RefreshToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Token");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Crud.Models.SuscripcionUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedioDePagoId")
                        .HasColumnType("int");

                    b.Property<int?>("MedioDePagoUsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("TipoSuscripcionId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MedioDePagoUsuarioId");

                    b.HasIndex("TipoSuscripcionId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("SuscripcionUsuario");
                });

            modelBuilder.Entity("Crud.Models.TipoSuscripcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Beneficios")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreadorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Imagen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IncluyeTipoSuscrId")
                        .HasColumnType("int");

                    b.Property<string>("MensajeBienvenida")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MensajeriaActiva")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.Property<bool>("VideoBienvenida")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreadorId");

                    b.HasIndex("IncluyeTipoSuscrId");

                    b.ToTable("TipoSuscripcion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Beneficios = "Acceso a un nuevo contenido por semana;;",
                            Imagen = "TODO",
                            MensajeBienvenida = "",
                            MensajeriaActiva = false,
                            Nombre = "Basico",
                            Precio = 1f,
                            VideoBienvenida = false
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            Beneficios = "Acceso a todo el contenido subido;;",
                            Imagen = "TODO",
                            IncluyeTipoSuscrId = 1,
                            MensajeBienvenida = "",
                            MensajeriaActiva = false,
                            Nombre = "Estandar",
                            Precio = 5f,
                            VideoBienvenida = false
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            Beneficios = "Todo lo que incluye el estandar;;CHATEA CONMIGO;;",
                            Imagen = "TODO",
                            IncluyeTipoSuscrId = 2,
                            MensajeBienvenida = "",
                            MensajeriaActiva = true,
                            Nombre = "Premium",
                            Precio = 10f,
                            VideoBienvenida = false
                        });
                });

            modelBuilder.Entity("Crud.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IdFacebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isAdministrador")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e23dd49d-3905-4b2e-9ce6-5f5f098d654e",
                            Email = "creadoresuyadmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Creadores",
                            NormalizedEmail = "CREADORESUYADMIN@GMAIL.COM",
                            NormalizedUserName = "CREADORESUY",
                            PasswordHash = "AQAAAAEAACcQAAAAEPuQv3c3aPudSbKH1scMS+gnVGuD7HlcUYcdfVKFOqUdHZ5r2yE6DQxsA5gZOHhsrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "81c04d0b-361a-4622-9f9d-4eb0095cdf2e",
                            Surname = "UY",
                            TwoFactorEnabled = false,
                            UserName = "CreadoresUY",
                            isAdministrador = true
                        });
                });

            modelBuilder.Entity("Crud.Models.UserCreador", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreadorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "CreadorId");

                    b.HasIndex("CreadorId");

                    b.ToTable("UserCreador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "cbde229a-f053-4807-9fca-5d8c720c64c2",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Crud.Models.Audio", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.Property<decimal>("Duracion")
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Audio");
                });

            modelBuilder.Entity("Crud.Models.Imagen", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.HasDiscriminator().HasValue("Imagen");
                });

            modelBuilder.Entity("Crud.Models.Link", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Link");
                });

            modelBuilder.Entity("Crud.Models.LiveStream", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("LiveStream");
                });

            modelBuilder.Entity("Crud.Models.Texto", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.Property<string>("Html")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Largo")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Texto");
                });

            modelBuilder.Entity("Crud.Models.Video", b =>
                {
                    b.HasBaseType("Crud.Models.Contenido");

                    b.Property<decimal>("Duracion")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Video_Duracion");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("Crud.Models.Cuenta", b =>
                {
                    b.HasBaseType("Crud.Models.MediosDePagos");

                    b.Property<string>("NumeroDeCuenta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sucursal")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Cuenta");
                });

            modelBuilder.Entity("Crud.Models.PayPal", b =>
                {
                    b.HasBaseType("Crud.Models.MediosDePagos");

                    b.Property<string>("ClientIdPayPal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorreoPaypal")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PayPal");
                });

            modelBuilder.Entity("Crud.Models.Tarjeta", b =>
                {
                    b.HasBaseType("Crud.Models.MediosDePagos");

                    b.Property<bool>("EsCredito")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Expiracion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEnTarjeta")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroTarjeta")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Tarjeta");
                });

            modelBuilder.Entity("Crud.Models.Contenido", b =>
                {
                    b.HasOne("Crud.Models.Categoria", "Categoria")
                        .WithMany("Contenido")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("Crud.Models.Creador", "Creador")
                        .WithMany("Contenidos")
                        .HasForeignKey("CreadorId");

                    b.HasOne("Crud.Models.TipoSuscripcion", "TipoSuscripcion")
                        .WithMany()
                        .HasForeignKey("TipoSuscripcionId");

                    b.Navigation("Categoria");

                    b.Navigation("Creador");

                    b.Navigation("TipoSuscripcion");
                });

            modelBuilder.Entity("Crud.Models.Conversacion", b =>
                {
                    b.HasOne("Crud.Models.Creador", "Creador")
                        .WithMany("ConversacionesSuscriptores")
                        .HasForeignKey("CreadorId");

                    b.HasOne("Crud.Models.User", "Usuario")
                        .WithMany("Conversaciones")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Creador");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Crud.Models.Creador", b =>
                {
                    b.HasOne("Crud.Models.Categoria", "Categoria1")
                        .WithMany()
                        .HasForeignKey("Categoria1Id");

                    b.HasOne("Crud.Models.Categoria", "Categoria2")
                        .WithMany()
                        .HasForeignKey("Categoria2Id");

                    b.HasOne("Crud.Models.User", "Usuario")
                        .WithOne("Creador")
                        .HasForeignKey("Crud.Models.Creador", "UserId");

                    b.Navigation("Categoria1");

                    b.Navigation("Categoria2");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Crud.Models.DevolucionPayPal", b =>
                {
                    b.HasOne("Crud.Models.Pago", "Pago")
                        .WithMany()
                        .HasForeignKey("PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Crud.Models.Finanza", b =>
                {
                    b.HasOne("Crud.Models.Creador", null)
                        .WithMany("Finanzas")
                        .HasForeignKey("CreadorId");
                });

            modelBuilder.Entity("Crud.Models.HistoricoSuscripcion", b =>
                {
                    b.HasOne("Crud.Models.TipoSuscripcion", "TipoSuscripcion")
                        .WithMany("HistoricoSuscripciones")
                        .HasForeignKey("TipoSuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoSuscripcion");
                });

            modelBuilder.Entity("Crud.Models.MediosDePagos", b =>
                {
                    b.HasOne("Crud.Models.EntidadFinanciera", "EntidadFinanciera")
                        .WithMany()
                        .HasForeignKey("IdEntidadFinanciera")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.Models.User", null)
                        .WithMany("MediosDePago")
                        .HasForeignKey("UserId");

                    b.Navigation("EntidadFinanciera");
                });

            modelBuilder.Entity("Crud.Models.Mensaje", b =>
                {
                    b.HasOne("Crud.Models.Conversacion", null)
                        .WithMany("Mensajes")
                        .HasForeignKey("ConversacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Models.Pago", b =>
                {
                    b.HasOne("Crud.Models.MediosDePagos", "Medio")
                        .WithMany()
                        .HasForeignKey("MedioId");

                    b.HasOne("Crud.Models.TipoSuscripcion", "Suscripcion")
                        .WithMany()
                        .HasForeignKey("TipoSuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medio");

                    b.Navigation("Suscripcion");
                });

            modelBuilder.Entity("Crud.Models.PagoPayPal", b =>
                {
                    b.HasOne("Crud.Models.Pago", "Pago")
                        .WithMany()
                        .HasForeignKey("PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Crud.Models.RefreshToken", b =>
                {
                    b.HasOne("Crud.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crud.Models.SuscripcionUsuario", b =>
                {
                    b.HasOne("Crud.Models.MediosDePagos", "MedioDePagoUsuario")
                        .WithMany()
                        .HasForeignKey("MedioDePagoUsuarioId");

                    b.HasOne("Crud.Models.TipoSuscripcion", "TipoSuscripcion")
                        .WithMany("SuscripcionesUsuarios")
                        .HasForeignKey("TipoSuscripcionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.Models.User", "Usuario")
                        .WithMany("SuscripcionUsuario")
                        .HasForeignKey("UsuarioId");

                    b.Navigation("MedioDePagoUsuario");

                    b.Navigation("TipoSuscripcion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Crud.Models.TipoSuscripcion", b =>
                {
                    b.HasOne("Crud.Models.Creador", "Creador")
                        .WithMany("TiposDeSuscripciones")
                        .HasForeignKey("CreadorId");

                    b.HasOne("Crud.Models.TipoSuscripcion", "IncluyeTipoSuscr")
                        .WithMany()
                        .HasForeignKey("IncluyeTipoSuscrId");

                    b.Navigation("Creador");

                    b.Navigation("IncluyeTipoSuscr");
                });

            modelBuilder.Entity("Crud.Models.UserCreador", b =>
                {
                    b.HasOne("Crud.Models.Creador", null)
                        .WithMany("Seguidores")
                        .HasForeignKey("CreadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.Models.User", null)
                        .WithMany("Siguiendo")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Crud.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Crud.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crud.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Crud.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crud.Models.Categoria", b =>
                {
                    b.Navigation("Contenido");
                });

            modelBuilder.Entity("Crud.Models.Conversacion", b =>
                {
                    b.Navigation("Mensajes");
                });

            modelBuilder.Entity("Crud.Models.Creador", b =>
                {
                    b.Navigation("Contenidos");

                    b.Navigation("ConversacionesSuscriptores");

                    b.Navigation("Finanzas");

                    b.Navigation("Seguidores");

                    b.Navigation("TiposDeSuscripciones");
                });

            modelBuilder.Entity("Crud.Models.TipoSuscripcion", b =>
                {
                    b.Navigation("HistoricoSuscripciones");

                    b.Navigation("SuscripcionesUsuarios");
                });

            modelBuilder.Entity("Crud.Models.User", b =>
                {
                    b.Navigation("Conversaciones");

                    b.Navigation("Creador");

                    b.Navigation("MediosDePago");

                    b.Navigation("Siguiendo");

                    b.Navigation("SuscripcionUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
